#!/bin/sh

if [ -z "${TEST_IMAGE}" ]; then
    echo "TEST_IMAGE variable must not be empty and must contain an image name"
    exit 1
fi

build_cache_archive="./latest_image.tar"

case "$1" in
    load)
        if [ -f "${build_cache_archive}" ]; then
            echo "Loading cached layers"
            docker load < "${build_cache_archive}"
            # Removing the archive (> 1GB!) so it will not be sent
            # to the docker build context
            rm "${build_cache_archive}"
        fi
        ;;
    store)
        echo "Caching layers"
        # shellcheck disable=SC2046,SC2086
        docker save "${CI_REGISTRY_IMAGE}:fetch" $(docker history -q ${CI_REGISTRY_IMAGE}:fetch | grep -v '<missing>') \
            "${CI_REGISTRY_IMAGE}:source-rbenv" $(docker history -q ${CI_REGISTRY_IMAGE}:source-rbenv | grep -v '<missing>') \
            "${CI_REGISTRY_IMAGE}:source-ruby-build" $(docker history -q ${CI_REGISTRY_IMAGE}:source-ruby-build | grep -v '<missing>') \
            "${CI_REGISTRY_IMAGE}:go" $(docker history -q ${CI_REGISTRY_IMAGE}:go | grep -v '<missing>') \
            "${CI_REGISTRY_IMAGE}:nodejs" $(docker history -q ${CI_REGISTRY_IMAGE}:nodejs | grep -v '<missing>') \
            "${CI_REGISTRY_IMAGE}:rbenv" $(docker history -q ${CI_REGISTRY_IMAGE}:rbenv | grep -v '<missing>') \
            "${TEST_IMAGE}" $(docker history -q ${TEST_IMAGE} | grep -v '<missing>') > "${build_cache_archive}"
        ;;
    build)
        docker build --target fetch --tag "${CI_REGISTRY_IMAGE}:fetch" .
        docker build --target source-rbenv --tag "${CI_REGISTRY_IMAGE}:source-rbenv" .
        docker build --target source-ruby-build --tag "${CI_REGISTRY_IMAGE}:source-ruby-build" .
        docker build --target go --tag "${CI_REGISTRY_IMAGE}:go" .
        docker build --target nodejs --tag "${CI_REGISTRY_IMAGE}:nodejs" .
        docker build --target rbenv --tag "${CI_REGISTRY_IMAGE}:rbenv" .
        docker build --tag "${TEST_IMAGE}" .
        ;;
    push)
        docker login --username gitlab-ci-token --password "${CI_BUILD_TOKEN}" registry.gitlab.com
        docker push "${TEST_IMAGE}"
        docker logout registry.gitlab.com
        ;;
    publish)
        docker login --username gitlab-ci-token --password "${CI_BUILD_TOKEN}" registry.gitlab.com
        docker pull "${TEST_IMAGE}"
        docker tag "${TEST_IMAGE}" "${CI_REGISTRY_IMAGE}:latest"
        docker push "${CI_REGISTRY_IMAGE}:latest"
        docker logout registry.gitlab.com
        ;;
    *)
        echo "Usage: $0 [load|store|build|publish]"
        exit 1
        ;;
esac
