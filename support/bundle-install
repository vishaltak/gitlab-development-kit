#!/usr/bin/env bash

set -euo pipefail

CDPATH=''
ROOT_PATH="$(cd "$(dirname "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}")/.." || exit ; pwd -P)"

GDK_QUIET="${GDK_QUIET:-false}"
DIR_TO_PROCESS="${1:-.}"
ASDF_AVAILABLE="$("${ROOT_PATH}"/bin/gdk config get asdf.__available\?)"
ASDF_RUBY_VERSION="$(grep -E '^ruby ' "${DIR_TO_PROCESS}/.tool-versions" | awk '{ print $2 }')"

ensure_bundler_version_installed() {
  local gem_install_args=

  if [[ "${GDK_QUIET}" == "true" ]]; then
    gem_install_args="--silent"
  fi

  exec_command "gem install bundler --conservative -v=$(needed_bundler_version) ${gem_install_args}"
}

needed_bundler_version() {
  awk '/BUNDLED WITH/{ getline; print $NF; }' Gemfile.lock
}

bundle_install() {
  bundle_check_command=$(prepare_command "bundle check > /dev/null 2>&1")
  bundle_install_command=$(prepare_command "bundle install --jobs $(nproc)")

  (exec_command "${bundle_check_command}" && echo "Bundle check passed.") || (echo "Bundle check failed. Installing gems using bundle install..." && exec_command "${bundle_install_command}")
}

prepare_command() {
  local command="${1}"

  [[ "${ASDF_AVAILABLE}" == "true" ]] && command="asdf exec ${command}"
  [[ -n "${ASDF_RUBY_VERSION}" ]] && command="ASDF_RUBY_VERSION=${ASDF_RUBY_VERSION} ${command}"

  echo "${command}"
}

exec_command() {
  local command="${1}"

  eval "${command}"
}

if [[ ! -d ${DIR_TO_PROCESS} ]]; then
  echo "ERROR: Directory '${DIR_TO_PROCESS}' does not exist, exiting."
fi

cd "${DIR_TO_PROCESS}"
ensure_bundler_version_installed
bundle_install
