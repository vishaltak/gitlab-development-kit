#!/usr/bin/env bash

# This is the GDK one line installation. For more information, please visit:
# https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/main/doc/index.md#one-line-installation
#
# Wrap everything in a function to ensure a partially downloaded install script
# is not executed. Inspired by https://install.sandstorm.io/
#
# Valid args are:
#
# 1 = directory in which to clone into, default is gitlab-development-kit (GDK_INSTALL_DIR)
# 2 = git SHA/branch to checkout once cloned, default is main (GDK_CLONE_BRANCH)
_() {

set -eo pipefail

DEFAULT_GDK_INSTALL_DIR="gitlab-development-kit"
DEFAULT_GITLAB_REPO_URL="https://gitlab.com/gitlab-org/gitlab.git"
CURRENT_ASDF_DIR="${ASDF_DIR:-${HOME}/.asdf}"
ASDF_SH_PATH="${CURRENT_ASDF_DIR}/asdf.sh"

REQUIRED_COMMANDS=(git make)

error() {
  echo "ERROR: ${1}" >&2
  exit 1
}

ensure_required_commands_exist() {
  for command in "${REQUIRED_COMMANDS[@]}"; do
    if ! command -v "${command}" > /dev/null 2>&1; then
      echo "ERROR: Please ensure ${command} is installed."
      exit 1
    fi
  done
}

ensure_not_root() {
  if [[ ${EUID} -eq 0 ]]; then
    return 1
  fi

  return 0
}

clone_gdk_if_needed() {
  if [[ -d ${GDK_INSTALL_DIR} ]]; then
    echo "INFO: A ${GDK_INSTALL_DIR} directory already exists in the current working directory, resuming.."
  else
    git clone https://gitlab.com/gitlab-org/gitlab-development-kit.git "${GDK_INSTALL_DIR}"
  fi
}

ensure_gdk_clone_branch_checked_out() {
  git -C "${PWD}/${GDK_INSTALL_DIR}" fetch origin "${GDK_CLONE_BRANCH}"
  git -C "${PWD}/${GDK_INSTALL_DIR}" checkout "${GDK_CLONE_BRANCH}"
}

bootstrap() {
  make bootstrap
}

gdk_install() {
  # shellcheck disable=SC1090
  source "${ASDF_SH_PATH}"
  gdk install gitlab_repo="$GITLAB_REPO_URL"
}

echo
echo "INFO: This is the GDK one line installation. For more information, please visit:"
echo "INFO: https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/main/doc/index.md#one-line-installation"
echo "INFO:"
echo "INFO: The source for the installation script can be viewed at:"
echo "INFO: https://gitlab.com/gitlab-org/gitlab-development-kit/-/blob/main/support/install"
echo

if [ $# -eq 1 ]; then
  echo "Where would you like to install the GDK? [./${DEFAULT_GDK_INSTALL_DIR}]"
  read -r GDK_INSTALL_DIR </dev/tty

  echo "Which GitLab repo URL would you like to clone? [${DEFAULT_GITLAB_REPO_URL}]"
  echo
  echo "ATTENTION: For non-GitLab team members, it is recommended to use the community fork (https://gitlab.com/gitlab-community/gitlab.git)."
  echo "See https://gitlab.com/gitlab-community/meta for instructions on how to join."
  echo "If you'd prefer to use your own repository, please ensure that its visibility is set to public."
  read -r GITLAB_REPO_URL </dev/tty
else
  GDK_INSTALL_DIR="${2-gitlab-development-kit}"
  GDK_CLONE_BRANCH="${3-main}"
fi

GDK_INSTALL_DIR=${GDK_INSTALL_DIR:-${DEFAULT_GDK_INSTALL_DIR}}
GDK_CLONE_BRANCH=${GDK_CLONE_BRANCH:-main}
GITLAB_REPO_URL=${GITLAB_REPO_URL:-${DEFAULT_GITLAB_REPO_URL}}

if ! ensure_not_root; then
  error "Running as root is not supported."
fi

ensure_required_commands_exist
clone_gdk_if_needed
ensure_gdk_clone_branch_checked_out
cd "${GDK_INSTALL_DIR}" || exit
bootstrap
gdk_install

echo
echo "INFO: To make sure GDK commands are available in this shell and ensure you're"
echo "INFO: in the newly installed GDK directory, please run:"
echo
echo "source \"${ASDF_SH_PATH}\""
echo "cd ${GDK_INSTALL_DIR}"
echo
}

# If we've reached here, the entire install script has been downloaded and
# "should" be safe to execute.
_ "$0" "$@"
