#!/usr/bin/env ruby
#
# frozen_string_literal: true

require 'fileutils'
require 'stringio'
require_relative '../lib/gdk'

# Abstraction on postgresql.conf port configuration
class PostgresPortConfig
  PORT_PATTERN = /(?<comment>[# \\t]*)(?<config_key>port[ \\t]=[ \\t])(?<port>[0-9]{4,6})/

  def initialize(config_file)
    @config_file = config_file
  end

  def port
    return nil if commented?

    config[:port]
  end

  def set_port!(new_port)
    new_config = StringIO.new

    each_config_line do |line|
      match = PORT_PATTERN.match(line)
      new_config << if match
                      line.sub(PORT_PATTERN, "\\k<config_key>#{new_port}")
                    else
                      line
                    end
    end

    # Make a backup before rewriting the original file
    backup_file = "#{@config_file}.#{Time.now.to_i}.bak"
    FileUtils.cp(@config_file, backup_file)

    # Rewrite the original file with the new configuration
    File.write(@config_file, new_config.string)

    refresh!
  end

  def commented?
    config[:comment].empty?
  end

  def file_exist?
    File.file?(@config_file)
  end

  private

  def config
    return @config unless @config.nil?

    @config = each_config_line do |line|
      match = PORT_PATTERN.match(line)

      break match if match
    end
  end

  def each_config_line(&)
    File.open(@config_file) { |file| file.each_line(&) }
  end

  def refresh!
    @config = nil
  end
end

if ARGV.length != 3
  puts 'Illegal number of parameters, expected:'
  puts '<postgres_dir> <postgres_port> <gdk_service_name>'
  exit 1
end

postgres_dir = File.expand_path(ARGV[0])
postgres_port = ARGV[1]
gdk_service = ARGV[2]
config_file = File.join(postgres_dir, 'data', 'postgresql.conf')

config = PostgresPortConfig.new(config_file)

unless config.file_exist?
  puts "PostgreSQL config file: #{config_file} does not exist."
  exit 1
end

# Find whether port needs change
if config.port != postgres_port
  config.set_port!(postgres_port)

  # When port changes we need to restart the database
  Shellout.new('gdk', 'restart', gdk_service).execute
end
