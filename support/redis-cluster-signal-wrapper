#!/usr/bin/env ruby
#
# frozen_string_literal: true

# rubocop:disable Style/GlobalVars
$pids = []

def start_cluster(shards, port, dir)
  node_addrs = []
  (0...shards).each do |idx|
    node_port = port + idx
    $pids << spawn(<<-TEXT
      redis-server --port #{node_port} \
        --cluster-enabled yes \
        --cluster-config-file #{dir}/nodes_#{node_port}.conf \
        --cluster-node-timeout 5000
    TEXT
                  )
    node_addrs << "127.0.0.1:#{node_port}"
  end

  sleep(5)

  `redis-cli --cluster-yes --cluster create #{node_addrs.join(' ')} --cluster-replicas 0`
end
# rubocop:enable Style/GlobalVars

# Broadcast SIGTERM to all nodes of the cluster
Signal.trap('TERM') do
  Process.kill('TERM', *$pids) # rubocop:disable Style/GlobalVars
end

# e.g. support/redis-cluster-signal-wrapper 4 6000 redis-cluster
shards = (ARGV[0] || 3).to_i
port = (ARGV[1] || 6000).to_i
dir = (ARGV[2] || 'redis-cluster').to_s

require 'fileutils'
FileUtils.mkdir_p dir

start_cluster(shards, port, dir)          # development cluster
start_cluster(shards, port + shards, dir) # test cluster

Process.waitall

exit($CHILD_STATUS&.exitstatus || 0)
