# Example Gitaly configuration file

socket_path = "<%= node.address %>"

# The directory where Gitaly's executables are stored
bin_dir = "<%= config.gdk_root.join('gitaly') %>"

internal_socket_dir = "<%= node.internal_socket_dir %>"

# # Optional: listen on a TCP socket. This is insecure (no authentication)
# listen_addr = "<%= config.hostname %>:9999"
# tls_listen_addr = "<%= config.hostname %>:8888

# # Optional: export metrics via Prometheus
<%= '#' unless config.prometheus.enabled? %>prometheus_listen_addr = "<%= config.hostname %>:<%= config.prometheus.gitaly_exporter_port %>"

# # Optional: authenticate Gitaly requests using a shared secret
[auth]
<% if config.gitaly.auth_token != '' %>
token = "<%= config.gitaly.auth_token %>"
<% else %>
# token = 'abc123secret'
<% end %>
# transitioning = false # Set `transitioning` to true to temporarily allow unauthenticated while rolling out authentication.

# [tls]
# certificate_path = '/home/git/cert.cert'
# key_path = '/home/git/key.pem'

# # Git settings
[git]
bin_path = "<%= config.git.bin %>"
catfile_cache_size = 10

<%- node.__storages.each do |storage| -%>
[[storage]]
name = "<%= storage.name %>"
path = "<%= storage.path %>"

<%- end -%>
<%- if config.praefect? -%>
[[storage]]
name = "praefect"
path = "<%= node.storage_dir %>"
<% end %>

# # You can optionally configure more storages for this Gitaly instance to serve up
#
# [[storage]]
# name = "other_storage"
# path = "/mnt/other_storage/repositories"
#

# # You can optionally configure Gitaly to output JSON-formatted log messages to stdout
[logging]
# # Optional: Set log level to only log entries with that severity or above
# # One of, in order: debug, info, warn, errror, fatal, panic
# # Defaults to "info"
level = "info"
format = "json"
dir = "<%= node.log_dir %>"

# # Additionally exceptions from the Go server can be reported to Sentry
# sentry_dsn = "https://<key>:<secret>@sentry.io/<project>"
# # Exceptions from gitaly-ruby can also be reported to Sentry
# ruby_sentry_dsn = "https://<key>:<secret>@sentry.io/<project>"

# # You can optionally configure Gitaly to record histogram latencies on GRPC method calls
# [prometheus]
# grpc_latency_buckets = [0.001, 0.005, 0.025, 0.1, 0.5, 1.0, 10.0, 30.0, 60.0, 300.0, 1500.0]

[gitaly-ruby]
# The directory where gitaly-ruby is installed
dir = "<%= config.gdk_root.join('gitaly', 'ruby') %>"

# # Gitaly-ruby resident set size (RSS) that triggers a memory restart (bytes)
# max_rss = 200000000
#
# # Grace period before a gitaly-ruby process is forcibly terminated after exceeding max_rss (seconds)
# graceful_restart_timeout = "10m"
#
# # Time that gitaly-ruby memory must remain high before a restart (seconds)
# restart_delay = "5m"
#
# # Number of gitaly-ruby worker processes
# num_workers = 2

[gitlab-shell]
# The directory where gitlab-shell is installed
dir = "<%= config.gitlab_shell.dir %>"

[gitlab]
url = "http+unix://<%= config.gitlab.__socket_file_escaped %>"
relative_url_root = "<%= config.relative_url_root %>"

[gitlab.http-settings]
self_signed_cert = false

# # You can adjust the concurrency of each RPC endpoint
# [[concurrency]]
# rpc = "/gitaly.RepositoryService/GarbageCollect"
# max_per_repo = 1
