#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'forwardable'
require 'set'

require_relative '../lib/gdk'

class PostgresUpgrader
  extend Forwardable

  def_delegators :postgresql, :current_data_dir, :current_version, :upgrade_needed?

  attr_reader :current_pg, :new_pg

  def initialize(target_version: GDK::Postgresql.target_version_major)
    @target_version = target_version
    @current_pg = GDK::Dependencies::PostgreSQL::Binaries.new(version: current_version)
    @new_pg = GDK::Dependencies::PostgreSQL::Binaries.new(version: target_version)

    check!
  end

  def check!
    GDK::Output.info "Available PostgreSQL versions: #{available_versions}"

    GDK::Output.abort "Unable to find target PostgreSQL version #{target_version}" unless available_versions.include?(target_version)
    GDK::Output.abort "Unable to find current PostgreSQL version #{current_version}" unless available_versions.include?(current_version)
  end

  def upgrade!
    success = true

    unless upgrade_needed?(target_version)
      GDK::Output.success "'#{current_data_dir}' is already compatible with PostgreSQL #{target_version}."
      return
    end

    begin
      run_gdk!('stop')
      init_db_in_target_path
      pgvector_setup
      rename_current_data_dir
      pg_upgrade
      promote_new_db
      run_gdk!('reconfigure')
    rescue StandardError => e
      success = false
      GDK::Output.error "An error occurred: #{e}"
      GDK::Output.warn 'Rolling back..'
      rename_current_data_dir_back
    end

    if success
      GDK::Output.success "Upgraded '#{current_data_dir}' from PostgreSQL #{current_version} to #{target_version}."
    else
      GDK::Output.warn "Upgrade failed. Rolled back to the original PostgreSQL #{current_version}."
    end
  end

  private

  attr_reader :target_version

  def postgresql
    @postgresql ||= GDK::Postgresql.new
  end

  def renamed_current_data_dir
    @renamed_current_data_dir ||= "#{current_data_dir}.#{current_version}.#{Time.now.to_i}"
  end

  def target_path
    @target_path ||= "#{current_data_dir}.#{target_version}.#{Time.now.to_i}"
  end

  def init_db_in_target_path
    GDK::Output.info "Initializing '#{target_path}' for PostgreSQL #{target_version}.."

    cmd = "#{new_pg.initdb_bin} --locale=C -E utf-8 #{target_path}"
    run_in_tmp!(cmd)
  end

  def rename_current_data_dir
    GDK::Output.info "Renaming #{current_data_dir} to #{renamed_current_data_dir}"

    FileUtils.mv(current_data_dir, renamed_current_data_dir)
  end

  def rename_current_data_dir_back
    return unless File.exist?(renamed_current_data_dir)

    GDK::Output.info "Renaming #{renamed_current_data_dir} to #{current_data_dir}"

    FileUtils.mv(renamed_current_data_dir, current_data_dir)
  end

  def pgvector_setup
    return unless GDK.config.gitlab.rails.databases.embedding.enabled?

    GDK::Output.info "Running 'make pgvector-setup'.."

    run!('make pgvector-setup', config.gdk_root)
  end

  def pg_upgrade
    cmd = "#{new_pg.pg_upgrade_bin} \
      --old-bindir #{current_pg.bin_path} \
      --new-bindir #{new_pg.bin_path} \
      --old-datadir #{renamed_current_data_dir} \
      --new-datadir #{target_path}"

    GDK::Output.info "Upgrading '#{renamed_current_data_dir}' (PostgreSQL #{current_version}) to '#{target_path}' PostgreSQL #{target_version}.."

    run_in_tmp!(cmd)
  end

  def promote_new_db
    GDK::Output.info "Promoting newly-creating database from '#{target_path}' to '#{current_data_dir}'"

    FileUtils.mv(target_path, current_data_dir)
  end

  def run!(cmd, chdir)
    sh = Shellout.new(cmd, chdir: chdir)
    sh.try_run

    return true if sh.success?

    GDK::Output.puts(sh.read_stdout)
    GDK::Output.puts(sh.read_stderr)

    raise "'#{cmd}' failed."
  end

  def run_in_tmp!(cmd)
    run!(cmd, GDK.config.gdk_root.join('tmp'))
  end

  # Run GDK cli with provider args
  #
  # @param [Array<String>] args
  def run_gdk!(*args)
    GDK::Output.info "Running 'gdk #{cmd.join(' ')}'.."

    cmd = ['gdk'] + args
    run!(cmd, GDK.config.gdk_root)
  end
end

upgrader = PostgresUpgrader.new
upgrader.upgrade!
